spring:
  application:
    name: edge-service
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-read-timeout: 5000
      request-connect-timeout: 5000
      fail-fast: false
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
    gateway:
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            #name of the filter
            - name: CircuitBreaker
              args:
                #name of circuit breaker
                name: catalogCircuitBreaker
                #forwards request to this URI when the circuit is open
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            #no fallback defined for this circuit breaker
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
      http-client:
        #time limit for a connection to be established
        connect-timeout: 2000
        #time limit for a response to be received
        pool:
          #type of connection pool (elastic,fixed or disabled)
          type: elastic
          #Idle time after which the communication channel will be closed
          max-idle-time: 15s
          #Time after which the communication channel will be closed
          max-life-time: 60s
        response-timeout: 5s
      #A list of default filters
      default-filters:
        #The name of the filter
        - name: Retry
          args:
            #Maximum of 3 retry attempts
            retries: 3
            #Retries only GET requests
            methods: GET
            #Retries only when 5XX errors
            series: SERVER_ERROR
            #Retries only when the given Exceptions are thrown
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            #Retries with a delay computed as "firstBackoff *(factor ^ n)"
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              #tokens per seconds
              replenishRate: 10
              #when a spike occurs, it is allowed to 20
              burstCapacity: 20
              #every request has a cost 1 token
              requestedTokens: 1
        - SaveSession
  lifecycle:
    timeout-per-shutdown-phase: 15s
  data:
    redis:
      host: localhost
      port: 6379
      connect-timeout: 2s
      timeout: 1s
  session:
    redis:
      namespace: polar:edge
    timeout: 10m
server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful
resilience4j:
  circuitbreaker:
    configs:
      #default configuration bean for all circuit breakers
      default:
        #the size of sliding window used to record the outcome of calls when the circuit is closed
        sliding-window-size: 20
        #number of permitted calls when the circuit is half-open
        permitted-number-of-calls-in-half-open-state: 5
        #when de failure rate is above the threshold, the circuit becomes open
        failure-rate-threshold: 50
        #waiting time before moving from open to half-open
        wait-duration-in-open-state:
          seconds: 15
  timelimiter:
    configs:
      #default configuration bean for all time limiters
      default:
        #time configuration in seconds
        timeout-duration:
          seconds: 5
logging:
  level:
    io.github.resilience4j: DEBUG